# Generated by Django 3.1.3 on 2021-07-09 03:00

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('camera_number', models.CharField(help_text='Name of the Camera. AVOID SPACES IN THE NAME.', max_length=100)),
                ('latitude', models.DecimalField(decimal_places=7, help_text='Latitude of the Camera Location.', max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, help_text='Longitude of the Camera Location.', max_digits=10)),
                ('url', models.CharField(help_text='Functioning RTSP link(rtsp://localhost:8554/ds-test) or Path to Local Video(/home/user/vid.mp4)', max_length=400)),
                ('plate_model', models.CharField(default='T20-FP16', help_text='Name of the Plate Model. Refer to Accuracy Benchmarking Sheet if needed.', max_length=100)),
                ('char_model', models.CharField(default='chars-ssd', help_text='Name of the Chars Model. Refer to Accuracy Benchmarking Sheet if needed.', max_length=100)),
                ('char_model_width', models.IntegerField(default=304, help_text='Width of the Input to Char Model. Refer to Chars Training Documentation.')),
                ('char_model_height', models.IntegerField(default=192, help_text='Heigth of the Input to Char Model. Refer to Chars Training Documentation.')),
                ('vid_width', models.IntegerField(default=1920, help_text='Width of the Video Resolution.')),
                ('vid_height', models.IntegerField(default=1080, help_text='Heigth of the Video Resolution.')),
                ('plate_threshold', models.DecimalField(decimal_places=1, default=0.4, help_text='Threshold for Plate Detection.', max_digits=10)),
                ('character_threshold', models.DecimalField(decimal_places=1, default=0.4, help_text='Threshold for Character Detection and Recognition.', max_digits=10)),
                ('plate_interval', models.IntegerField(default=5, help_text='Inference Interval for Plate Detection.')),
                ('roi_y_min', models.IntegerField(default=0, help_text='ROI_Y Minimum value from Top. Inference will happen only in [(xmin,ymin),(xmax,ymin),(xmin,ymax),(xmax,ymax)]-(Origin at the top left corner).')),
                ('roi_x_min', models.IntegerField(default=0, help_text='ROI_X Minimum value from Left. Inference will happen only in [(xmin,ymin),(xmax,ymin),(xmin,ymax),(xmax,ymax)]-(Origin at the top left corner).')),
                ('roi_y_max', models.IntegerField(default=1080, help_text='ROI_Y Maximum value from Top. Inference will happen only in [(xmin,ymin),(xmax,ymin),(xmin,ymax),(xmax,ymax)]-(Origin at the top left corner).')),
                ('roi_x_max', models.IntegerField(default=1980, help_text='ROI_X Maximum value from Left. Inference will happen only in [(xmin,ymin),(xmax,ymin),(xmin,ymax),(xmax,ymax)]-(Origin at the top left corner).')),
                ('nireq', models.IntegerField(default=1, help_text='Number of Inference Requests for plate detection. It is usually the number of streams.')),
                ('object_tracking', models.CharField(default='short-term', help_text='short-term/zero-term/off - Enable Object Tracking.', max_length=100)),
                ('post_processing_method', models.IntegerField(default=15, help_text='Post-processing Method - 1 to 21. Refer to AB2 for details.')),
                ('cluster_end', models.IntegerField(default=30, help_text='Y-axis value beyond which we delcare that vehicle has passed and the cluster has ended. 0 means vehicle reached top end of ROI- but then full image of vehicle will be missed. So a value of 10-30 is ideal.')),
                ('extras', models.IntegerField(default=-3, help_text='Extra pixels that we manually add to the cropped plate. Increasing this leads to coloured boundingbox in saved image. This is a potential bug - have to change gvawatermark if needed.')),
                ('full_image_save_quality', models.IntegerField(default=20, help_text='Cv2.Write Quaility of Image.Lesser the quality, lesser the storage space needed. Range of 0-99.')),
                ('cropped_image_save_quality', models.IntegerField(default=60, help_text='Cv2.Write Quaility of Image.Lesser the quality, lesser the storage space needed. Range of 0-99.')),
                ('video_display', models.BooleanField(default=False, help_text='Tick to turn it on. Enables video display with bounding boxes and FPS for debugging purposes. Remember to disable before Deployment.')),
            ],
            options={
                'db_table': 'camera_config',
            },
        ),
        migrations.CreateModel(
            name='GuardianParameters',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('records_deletion_days', models.IntegerField(default=10, help_text='Number of days of Records to be present in the Database.')),
                ('images_deletion_days', models.IntegerField(default=7, help_text='Number of days of Images to present in the Device.')),
            ],
            options={
                'db_table': 'guardian_parameters',
            },
        ),
        migrations.CreateModel(
            name='LicensePlates',
            fields=[
                ('slno', models.AutoField(primary_key=True, serialize=False)),
                ('camera_number', models.CharField(max_length=100)),
                ('number_plate_number', models.CharField(max_length=50)),
                ('image', models.CharField(max_length=100)),
                ('date', models.DateTimeField()),
                ('fullimage', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'license_plates',
            },
        ),
    ]
